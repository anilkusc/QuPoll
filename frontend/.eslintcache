[{"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\index.js":"1","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\App.js":"2","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Pages\\Main.js":"3","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\Navbar.js":"4","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\AskQuestion.js":"5","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\Questions.js":"6","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\SignIn.js":"7","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\SignOut.js":"8","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\QuestionCard.js":"9","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\ChangeSession.js":"10","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Pages\\Users.js":"11","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Pages\\Sessions.js":"12","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\EditUser.js":"13","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\CreateUser.js":"14","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\DeleteUser.js":"15","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\CreateSession.js":"16","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\DeleteSession.js":"17","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\EditSession.js":"18"},{"size":196,"mtime":1609578602162,"results":"19","hashOfConfig":"20"},{"size":2768,"mtime":1610731177374,"results":"21","hashOfConfig":"20"},{"size":3776,"mtime":1610660772052,"results":"22","hashOfConfig":"20"},{"size":6118,"mtime":1610548727070,"results":"23","hashOfConfig":"20"},{"size":3098,"mtime":1610552434064,"results":"24","hashOfConfig":"20"},{"size":3447,"mtime":1610658201636,"results":"25","hashOfConfig":"20"},{"size":3867,"mtime":1610045436481,"results":"26","hashOfConfig":"20"},{"size":2374,"mtime":1610566762371,"results":"27","hashOfConfig":"20"},{"size":4945,"mtime":1610646139091,"results":"28","hashOfConfig":"20"},{"size":3314,"mtime":1610731080515,"results":"29","hashOfConfig":"20"},{"size":6039,"mtime":1610046052180,"results":"30","hashOfConfig":"20"},{"size":6019,"mtime":1610048600558,"results":"31","hashOfConfig":"20"},{"size":5662,"mtime":1610047702709,"results":"32","hashOfConfig":"20"},{"size":5105,"mtime":1610046957298,"results":"33","hashOfConfig":"20"},{"size":2899,"mtime":1610047591091,"results":"34","hashOfConfig":"20"},{"size":4078,"mtime":1610049020567,"results":"35","hashOfConfig":"20"},{"size":2935,"mtime":1610047615086,"results":"36","hashOfConfig":"20"},{"size":4832,"mtime":1610048885408,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"xejomx",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\index.js",[],["84","85"],"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\App.js",["86"],"import React from 'react';\nimport Main from './Pages/Main'\nimport Users from './Pages/Users'\nimport Sessions from './Pages/Sessions'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  //Redirect,\n  //Link\n} from \"react-router-dom\";\nimport Navbar from './Components/Navbar';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authenticated: false,\n      session: null,\n    };\n    this.handleSetLoggedIn = this.handleSetLoggedIn.bind(this);\n    this.handleSetLoggedOut = this.handleSetLoggedOut.bind(this);\n    this.handleChangeSession = this.handleChangeSession.bind(this);\n  }\n  componentDidMount() {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n    };\n\n    fetch('/backend/AutoLogin', requestOptions)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data == 1) {\n          this.setState({ authenticated: true })\n        }\n      })\n      .catch(error => {\n        console.log(\"Error ========>\", error);\n        alert(\"There is error while autologin\")\n      })\n  }\n  handleChangeSession(Id) {\n    this.setState({ session: Id });\n  }\n  handleSetLoggedIn() {\n    this.setState({ authenticated: true });\n  }\n  handleSetLoggedOut() {\n    this.setState({ authenticated: false });\n  }\n  render() {\n\n    return (\n      <div>\n        <Routes refresh={this.state.refresh} handleChangeSession={this.handleChangeSession} session={this.state.session} authenticated={this.state.authenticated} handleSetLoggedIn={this.handleSetLoggedIn} handleSetLoggedOut={this.handleSetLoggedOut} />\n      </div>\n    );\n  }\n}\n\nclass Routes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n\n  render() {\n\n    return (\n      <Router>\n        <Navbar handleChangeSession={this.props.handleChangeSession} session={this.props.session} authenticated={this.props.authenticated} handleSetLoggedIn={this.props.handleSetLoggedIn} handleSetLoggedOut={this.props.handleSetLoggedOut} />\n        <Switch>\n          <Route exact path=\"/\" >\n            <Main handleChangeSession={this.props.handleChangeSession} session={this.props.session} authenticated={this.props.authenticated} />\n          </Route>\n          <PrivateRoutes authenticated={this.props.authenticated} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nclass PrivateRoutes extends React.Component {\n  render() {\n    if (this.props.authenticated) {\n      return (\n        <div>\n          <Route exact path=\"/Users\" >\n            <Users />\n          </Route>\n          <Route exact path=\"/Sessions\" >\n            <Sessions />\n          </Route>\n        </div>\n      )\n    } else {\n      return <div>Unauthorized</div>\n    }\n  }\n}\n\nexport default App;","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Pages\\Main.js",["87","88"],"import React from 'react';\r\nimport AskQuestion from \"../Components/AskQuestion\";\r\nimport Questions from \"../Components/Questions\";\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions: [],\r\n    }\r\n    this.handleUpdateQuestions = this.handleUpdateQuestions.bind(this);\r\n    this.setSession = this.setSession.bind(this);\r\n  }\r\n\r\n\r\n  setSession() {\r\n    var session = this.props.session\r\n    if (session == null) {\r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      };\r\n      fetch('/backend/CurrentSession', requestOptions)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data == \"-1\") {\r\n            var getSession = prompt(\"Please enter session id\", \"1\");\r\n            if (getSession != null && getSession != \"\" && getSession > -1) {\r\n              session = getSession\r\n            } else {\r\n              alert(\"Invalid Session Id!\")\r\n              return\r\n            }\r\n\r\n          } else {\r\n            session = data\r\n          }\r\n          const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: \"{\\\"id\\\":\" + session + \"}\"\r\n          };\r\n          fetch('/backend/ChangeSession', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              if (data.id != null) {\r\n                this.props.handleChangeSession(data.id)\r\n              } else {\r\n                alert(\"Error While Setting Session\")\r\n              }\r\n            })\r\n            .catch(error => {\r\n              console.log(\"Error ========>\", error);\r\n              alert(\"Error While Setting Session\")\r\n            })\r\n        })\r\n    }\r\n    return session\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    var session = this.setSession()\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: \"{\\\"id\\\":\" + session + \"}\"\r\n    };\r\n\r\n    fetch('/backend/GetQuestions', requestOptions)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data != null) {\r\n          this.setState({ questions: data })\r\n        } else {\r\n          alert(\"There is no question on this session \")\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(\"Error ========>\", error);\r\n        alert(\"There is error while fetching questions\")\r\n      })\r\n\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.session !== prevProps.session) {\r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: \"{\\\"id\\\":\" + this.props.session + \"}\"\r\n      };\r\n      fetch('/backend/GetQuestions', requestOptions)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n\r\n          if (data != null) {\r\n            this.setState({ questions: data })\r\n          } else {\r\n            this.setState({ questions: [] })\r\n            alert(\"There is no question on this session \")\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(\"Error ========>\", error);\r\n          alert(\"There is error while fetching questions\")\r\n        })\r\n    }\r\n  }\r\n  handleUpdateQuestions(questions) {\r\n    this.setState({ questions: questions })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br></br>\r\n        <AskQuestion session={this.props.session} handleUpdateQuestions={this.handleUpdateQuestions} />\r\n        <Questions authenticated={this.props.authenticated} session={this.props.session} handleUpdateQuestions={this.handleUpdateQuestions} questions={this.state.questions} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Main;","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\Navbar.js",[],"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\AskQuestion.js",[],"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\Questions.js",["89","90","91","92"],"\r\nimport React from \"react\";\r\nimport QuestionCard from \"./QuestionCard\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = theme => ({\r\n    cardHeader: {\r\n        backgroundColor:\r\n            theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\r\n    },\r\n});\r\n\r\nclass Questions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div >\r\n                <Container component=\"main\">\r\n                    <Grid container justify=\"center\" spacing={12} >\r\n                        <Grid item md={6}>\r\n                            <Card>\r\n                                <CardHeader\r\n                                    title={\"Waiting For Answer\"}\r\n                                    className={classes.cardHeader}\r\n                                />\r\n                                <CardContent>\r\n                                    {this.props.questions.sort((a, b) => a.like_count > b.like_count ? -1 : 1).map(question => {\r\n                                        if (question.answered == 0) {\r\n                                            return(\r\n                                            <ul key={question.id}>\r\n                                                <QuestionCard authenticated={this.props.authenticated} session={this.props.session} handleUpdateQuestions={this.props.handleUpdateQuestions} question={question} />\r\n                                            </ul>)\r\n                                        }\r\n                                    }\r\n                                    )}\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item md={6}>\r\n                            <Card>\r\n                                <CardHeader\r\n                                    title={\"Answered\"}\r\n                                    className={classes.cardHeader}\r\n                                />\r\n                                <CardContent>\r\n                                    {this.props.questions.sort((a, b) => a.like_count > b.like_count ? -1 : 1).map(question => {\r\n                                        if (question.answered == 1) {\r\n                                            return(\r\n                                            <ul key={question.id}>\r\n                                                <QuestionCard authenticated={this.props.authenticated} session={this.props.session} handleUpdateQuestions={this.props.handleUpdateQuestions} question={question} />\r\n                                            </ul>\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                    )}\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(Questions)","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\SignIn.js",[],"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\SignOut.js",[],"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\QuestionCard.js",["93","94"],"\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\n\r\nclass QuestionCard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            liked: false,\r\n        };\r\n        this.handleLikeQuestion = this.handleLikeQuestion.bind(this);\r\n        this.handleAnswerQuestion = this.handleAnswerQuestion.bind(this);\r\n\r\n    }\r\n\r\n    handleLikeQuestion() {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: \"{\\\"session\\\":{\\\"id\\\":\" + this.props.session + \"},\\\"id\\\":\" + this.props.question.id + \"}\",\r\n        };\r\n        if (this.props.question.id == null || this.props.question.id == \"\") {\r\n            alert(\"id is not defined\")\r\n            return\r\n        }\r\n        if (this.state.liked) {\r\n            fetch('/backend/UnlikeQuestion', requestOptions)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    this.setState({ liked: !this.state.liked })\r\n                    this.props.handleUpdateQuestions(data)\r\n                })\r\n                .catch(error => {\r\n                    console.log(\"Error ========>\", error);\r\n                    alert(\"There is error while unlike question\")\r\n                })\r\n        } else {\r\n            fetch('/backend/LikeQuestion', requestOptions)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    this.setState({ liked: !this.state.liked })\r\n                    this.props.handleUpdateQuestions(data)\r\n                })\r\n                .catch(error => {\r\n                    console.log(\"Error ========>\", error);\r\n                    alert(\"There is error while like question\")\r\n                })\r\n        }\r\n\r\n    }\r\n    handleAnswerQuestion() {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: \"{\\\"session\\\":{\\\"id\\\":\" + this.props.session + \"},\\\"id\\\":\" + this.props.question.id + \"}\",\r\n        };\r\n        if (this.props.question.id == null || this.props.question.id == \"\") {\r\n            alert(\"id is not defined\")\r\n            return\r\n        }\r\n\r\n        fetch('/backend/AnswerQuestion', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n\r\n                this.props.handleUpdateQuestions(data)\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Error ========>\", error);\r\n                alert(\"There is error while answer question\")\r\n            })\r\n    }\r\n    render() {\r\n        var answered\r\n        var like\r\n        if (this.props.authenticated) {\r\n            answered = <IconButton aria-label=\"add to favorites\"> <SwapHorizIcon onClick={this.handleAnswerQuestion} color=\"primary\" /></IconButton>\r\n        }\r\n        if (this.state.liked) {\r\n            like = <IconButton aria-label=\"add to favorites\"><FavoriteIcon onClick={this.handleLikeQuestion} color=\"secondary\" />{this.props.question.like_count}&nbsp;</IconButton>\r\n        } else {\r\n            like = <IconButton aria-label=\"add to favorites\"><FavoriteBorderIcon onClick={this.handleLikeQuestion} color=\"secondary\" />{this.props.question.like_count}&nbsp;</IconButton>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            <b>{this.props.question.id}</b>\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        {this.props.question.question}\r\n                    </CardContent>\r\n                    <CardActions disableSpacing>\r\n                        {like}\r\n                        <FaceIcon />\r\n                        {this.props.question.asker} &nbsp;\r\n                        <DateRangeIcon />\r\n                          &nbsp;\r\n                           |{this.props.question.date}|\r\n                           &nbsp;\r\n                           <IconButton >\r\n                            {answered}\r\n                        </IconButton>\r\n                               &nbsp;\r\n                    </CardActions>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionCard","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\ChangeSession.js",[],"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Pages\\Users.js",["95","96","97","98","99"],"import React from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport EditUser from '../Components/EditUser';\r\nimport CreateUser from '../Components/CreateUser';\r\nimport DeleteUser from '../Components/DeleteUser';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = theme => ({\r\n  modal: {\r\n    top: `49%`,\r\n    left: `51%`,\r\n    transform: `translate(-49%, -51%)`,\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  }\r\n});\r\n\r\nclass Users extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      username: \"\",\r\n      password: \"\",\r\n      role: \"\",\r\n      openEdit: false,\r\n      openCreate: false,\r\n      openDelete: false,\r\n      select: [],\r\n      rows: [],\r\n      columns: [\r\n        { field: 'id', headerName: 'ID', width: 70 },\r\n        { field: 'username', headerName: 'Username', width: 130 },\r\n        { field: 'role', headerName: 'Role', width: 130 },\r\n      ]\r\n    }\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.handleCloseEdit = this.handleCloseEdit.bind(this);\r\n    this.handleCloseCreate = this.handleCloseCreate.bind(this);\r\n    this.handleCloseDelete = this.handleCloseDelete.bind(this);\r\n    this.handleOpenEdit = this.handleOpenEdit.bind(this);\r\n    this.handleOpenCreate = this.handleOpenCreate.bind(this);\r\n    this.handleOpenDelete = this.handleOpenDelete.bind(this);\r\n    this.onChangeUsers = this.onChangeUsers.bind(this);\r\n\r\n  }\r\n  componentDidMount() {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    };\r\n    fetch('/backend/GetUsers', requestOptions)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data != null) {\r\n          this.setState({ rows: data })\r\n        } else {\r\n          alert(\"There is no user\")\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(\"Error ========>\", error);\r\n        alert(\"There is error while fetching questions\")\r\n      })\r\n  }\r\n  onChangeUsers(data){\r\n    this.setState({ rows: data })\r\n  }\r\n  handleDelete() {\r\n    if (this.state.select.rowIds == \"\" || this.state.select.rowIds == null || this.state.select.rowIds <= 0) {\r\n      alert(\"You should select at least 1 user for delete\")\r\n      return\r\n    } else {\r\n      var selected = this.state.select.rowIds\r\n    }\r\n    var rows = this.state.rows\r\n    var deleted = []\r\n\r\n    for (var i = 0; i < selected.length; i++) {\r\n      for (var j = 0; j < rows.length; j++) {\r\n        if (rows[j].id == selected[i]) {\r\n          deleted.push(rows[j])\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n  handleCloseEdit() {\r\n    this.setState({ openEdit: false })\r\n  }\r\n  handleOpenEdit() {\r\n    if (this.state.select.rowIds == \"\" || this.state.select.rowIds == null || this.state.select.rowIds.length != 1) {\r\n      alert(\"You should select 1 user for editing\")\r\n      return\r\n    } else {\r\n      var selected = this.state.select.rowIds\r\n      var rows = this.state.rows\r\n      var edited = []\r\n\r\n      for (var i = 0; i < rows.length; i++) {\r\n        if (rows[i].id == selected[0]) {\r\n          edited.push(rows[i])\r\n          break\r\n        }\r\n      }\r\n      this.setState({ openEdit: true, id: edited[0].id, username: edited[0].username, password: \"\", role: edited[0].role })\r\n    }\r\n  }\r\n  handleCloseCreate() {\r\n    this.setState({ openCreate: false })\r\n  }\r\n  handleOpenCreate() {\r\n    this.setState({ openCreate: true })\r\n  }\r\n  handleCloseDelete() {\r\n    this.setState({ openDelete: false })\r\n  }\r\n  handleOpenDelete() {\r\n    this.setState({ openDelete: true })\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <br></br>\r\n        &nbsp;\r\n        <Modal\r\n          open={this.state.openCreate}\r\n          onClose={this.handleCloseCreate}\r\n          aria-labelledby=\"simple-modal-title\"\r\n          aria-describedby=\"simple-modal-description\"\r\n        >\r\n          <div className={classes.modal}>\r\n            <CreateUser handleCloseCreate={this.handleCloseCreate} onChangeUsers={this.onChangeUsers}/>\r\n          </div>\r\n        </Modal>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleOpenCreate} >\r\n          Create\r\n          &nbsp; </Button> &nbsp;\r\n        <Modal\r\n          open={this.state.openEdit}\r\n          onClose={this.handleCloseEdit}\r\n          aria-labelledby=\"simple-modal-title\"\r\n          aria-describedby=\"simple-modal-description\"\r\n        >\r\n          <div className={classes.modal}>\r\n            <EditUser handleCloseEdit={this.handleCloseEdit} onChangeUsers={this.onChangeUsers} id={this.state.id} username={this.state.username} password={this.state.password} role={this.state.role} />\r\n          </div>\r\n        </Modal>\r\n        <Button onClick={this.handleOpenEdit} variant=\"contained\" color=\"default\">\r\n          Edit\r\n          </Button>&nbsp;&nbsp;\r\n          <Modal\r\n          open={this.state.openDelete}\r\n          onClose={this.handleCloseDelete}\r\n          aria-labelledby=\"simple-modal-title\"\r\n          aria-describedby=\"simple-modal-description\"\r\n        >\r\n          <div className={classes.modal}>\r\n          <DeleteUser users={this.state.select.rowIds} handleCloseCreate={this.handleCloseDelete} onChangeUsers={this.onChangeUsers}/>\r\n          </div>\r\n        </Modal>\r\n        <Button onClick={this.handleOpenDelete} variant=\"contained\" color=\"secondary\">\r\n          Delete\r\n      </Button>\r\n        <br></br>\r\n        <br></br>\r\n        <div style={{ height: 400, width: '100%' }}>\r\n          <DataGrid onSelectionChange={(data) => this.setState({ select: data })} rows={this.state.rows} columns={this.state.columns} pageSize={5} checkboxSelection />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(useStyles)(Users);","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Pages\\Sessions.js",["100","101","102","103","104"],"import React from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport EditSession from '../Components/EditSession';\r\nimport CreateSession from '../Components/CreateSession';\r\nimport DeleteSession from '../Components/DeleteSession';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = theme => ({\r\n  modal: {\r\n    top: `49%`,\r\n    left: `51%`,\r\n    transform: `translate(-49%, -51%)`,\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  }\r\n});\r\n\r\nclass Sessions extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      session_name: \"\",\r\n      password: \"\",\r\n      openEdit: false,\r\n      openCreate: false,\r\n      openDelete: false,\r\n      select: [],\r\n      rows: [],\r\n      columns: [\r\n        { field: 'id', headerName: 'ID', width: 70 },\r\n        { field: 'session_name', headerName: 'Session Name', width: 130 },\r\n      ]\r\n    }\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.handleCloseEdit = this.handleCloseEdit.bind(this);\r\n    this.handleCloseCreate = this.handleCloseCreate.bind(this);\r\n    this.handleCloseDelete = this.handleCloseDelete.bind(this);\r\n    this.handleOpenEdit = this.handleOpenEdit.bind(this);\r\n    this.handleOpenCreate = this.handleOpenCreate.bind(this);\r\n    this.handleOpenDelete = this.handleOpenDelete.bind(this);\r\n    this.onChangeSessions = this.onChangeSessions.bind(this);\r\n\r\n  }\r\n  componentDidMount() {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    };\r\n    fetch('/backend/GetSessions', requestOptions)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data != null) {\r\n          this.setState({ rows: data })\r\n        } else {\r\n          alert(\"There is no session\")\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(\"Error ========>\", error);\r\n        alert(\"There is error while fetching sessions\")\r\n      })\r\n  }\r\n  onChangeSessions(data){\r\n    this.setState({ rows: data })\r\n  }\r\n  handleDelete() {\r\n    if (this.state.select.rowIds == \"\" || this.state.select.rowIds == null || this.state.select.rowIds <= 0) {\r\n      alert(\"You should select at least 1 session for delete\")\r\n      return\r\n    } else {\r\n      var selected = this.state.select.rowIds\r\n    }\r\n    var rows = this.state.rows\r\n    var deleted = []\r\n\r\n    for (var i = 0; i < selected.length; i++) {\r\n      for (var j = 0; j < rows.length; j++) {\r\n        if (rows[j].id == selected[i]) {\r\n          deleted.push(rows[j])\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n  handleCloseEdit() {\r\n    this.setState({ openEdit: false })\r\n  }\r\n  handleOpenEdit() {\r\n    if (this.state.select.rowIds == \"\" || this.state.select.rowIds == null || this.state.select.rowIds.length != 1) {\r\n      alert(\"You should select 1 session for editing\")\r\n      return\r\n    } else {\r\n      var selected = this.state.select.rowIds\r\n      var rows = this.state.rows\r\n      var edited = []\r\n\r\n      for (var i = 0; i < rows.length; i++) {\r\n        if (rows[i].id == selected[0]) {\r\n          edited.push(rows[i])\r\n          break\r\n        }\r\n      }\r\n      this.setState({ openEdit: true, id: edited[0].id, session_name: edited[0].session_name, password: \"\" })\r\n    }\r\n  }\r\n  handleCloseCreate() {\r\n    this.setState({ openCreate: false })\r\n  }\r\n  handleOpenCreate() {\r\n    this.setState({ openCreate: true })\r\n  }\r\n  handleCloseDelete() {\r\n    this.setState({ openDelete: false })\r\n  }\r\n  handleOpenDelete() {\r\n    this.setState({ openDelete: true })\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <br></br>\r\n        &nbsp;\r\n        <Modal\r\n          open={this.state.openCreate}\r\n          onClose={this.handleCloseCreate}\r\n          aria-labelledby=\"simple-modal-title\"\r\n          aria-describedby=\"simple-modal-description\"\r\n        >\r\n          <div className={classes.modal}>\r\n            <CreateSession handleCloseCreate={this.handleCloseCreate} onChangeSessions={this.onChangeSessions}/>\r\n          </div>\r\n        </Modal>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleOpenCreate} >\r\n          Create\r\n          &nbsp; </Button> &nbsp;\r\n        <Modal\r\n          open={this.state.openEdit}\r\n          onClose={this.handleCloseEdit}\r\n          aria-labelledby=\"simple-modal-title\"\r\n          aria-describedby=\"simple-modal-description\"\r\n        >\r\n          <div className={classes.modal}>\r\n            <EditSession handleCloseEdit={this.handleCloseEdit} onChangeSessions={this.onChangeSessions} id={this.state.id} session_name={this.state.session_name} password={this.state.password} />\r\n          </div>\r\n        </Modal>\r\n        <Button onClick={this.handleOpenEdit} variant=\"contained\" color=\"default\">\r\n          Edit\r\n          </Button>&nbsp;&nbsp;\r\n          <Modal\r\n          open={this.state.openDelete}\r\n          onClose={this.handleCloseDelete}\r\n          aria-labelledby=\"simple-modal-title\"\r\n          aria-describedby=\"simple-modal-description\"\r\n        >\r\n          <div className={classes.modal}>\r\n          <DeleteSession sessions={this.state.select.rowIds} handleCloseDelete={this.handleCloseDelete} onChangeSessions={this.onChangeSessions}/>\r\n          </div>\r\n        </Modal>\r\n        <Button onClick={this.handleOpenDelete} variant=\"contained\" color=\"secondary\">\r\n          Delete\r\n      </Button>\r\n        <br></br>\r\n        <br></br>\r\n        <div style={{ height: 400, width: '100%' }}>\r\n          <DataGrid onSelectionChange={(data) => this.setState({ select: data })} rows={this.state.rows} columns={this.state.columns} pageSize={5} checkboxSelection />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(useStyles)(Sessions);","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\EditUser.js",[],"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\CreateUser.js",[],"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\DeleteUser.js",["105"],"\r\nimport React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst useStyles = theme => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n});\r\n\r\nclass DeleteUser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    var sendBody = []\r\n    if(this.props.users < 1 ){\r\n      alert(\"You must select at least 1 user for deleting.\")\r\n    }\r\n    this.props.users.map((user) => {\r\n      function AddRowToTable(id) {\r\n        sendBody.push({ id: parseInt(id) });\r\n      }\r\n      AddRowToTable(user)\r\n    })\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(sendBody)\r\n    };\r\n    fetch('/backend/DeleteUser', requestOptions)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.props.onChangeUsers(data)\r\n        this.props.handleCloseDelete()\r\n      })\r\n      .catch(error => {\r\n        console.log(\"Error ========>\", error);\r\n        alert(\"Error While Delete User\")\r\n      })\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Users with the following id will be deleted. Do you confirm?\r\n            </Typography>\r\n            {JSON.stringify(this.props.users)}\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.handleSubmit}\r\n              className={classes.submit}\r\n            >\r\n              Delete Users\r\n              </Button>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(DeleteUser)","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\CreateSession.js",[],"C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\DeleteSession.js",["106"],"\r\nimport React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst useStyles = theme => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n});\r\n\r\nclass DeleteSession extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    var sendBody = []\r\n    if(this.props.sessions < 1 ){\r\n      alert(\"You must select at least 1 session for deleting.\")\r\n    }\r\n    this.props.sessions.map((session) => {\r\n      function AddRowToTable(id) {\r\n        sendBody.push({ id: parseInt(id) });\r\n      }\r\n      AddRowToTable(session)\r\n    })\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(sendBody)\r\n    };\r\n    fetch('/backend/DeleteSession', requestOptions)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.props.onChangeSessions(data)\r\n        this.props.handleCloseDelete()\r\n      })\r\n      .catch(error => {\r\n        console.log(\"Error ========>\", error);\r\n        alert(\"Error While Delete Session\")\r\n      })\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sessions with the following id will be deleted. Do you confirm?\r\n            </Typography>\r\n            {JSON.stringify(this.props.sessions)}\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.handleSubmit}\r\n              className={classes.submit}\r\n            >\r\n              Delete Users\r\n              </Button>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(DeleteSession)","C:\\Users\\Anil\\Desktop\\Projects\\QuPoll\\frontend\\src\\Components\\EditSession.js",["107","108","109","110"],"\r\nimport React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = theme => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n});\r\n\r\nclass EditSession extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: this.props.id,\r\n      session_name: this.props.session_name,\r\n      password: this.props.password,\r\n    };\r\n    this.handleChangeSessionname = this.handleChangeSessionname.bind(this);\r\n    this.handleChangePassword = this.handleChangePassword.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChangeSessionname(event) {\r\n    this.setState({ session_name: event.target.value });\r\n  }\r\n  handleChangePassword(event) {\r\n    this.setState({ password: event.target.value });\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: \"{\\\"id\\\":\"+ this.state.id +\",\\\"session_name\\\":\\\"\" + this.state.session_name + \"\\\",\\\"password\\\":\\\"\" + this.state.password + \"\\\"}\"\r\n    };\r\n    fetch('/backend/UpdateSession', requestOptions)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.props.onChangeSessions(data)\r\n        this.props.handleCloseEdit()\r\n      })\r\n      .catch(error => {\r\n        console.log(\"Error ========>\", error);\r\n        alert(\"Error Updating Session\")\r\n      })\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Edit Session\r\n        </Typography>\r\n            <form className={classes.form} noValidate onSubmit={this.handleSubmit}>\r\n              <TextField\r\n                disabled\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"text\"\r\n                label=\"ID\"\r\n                name=\"id\"\r\n                autoComplete=\"id\"\r\n                defaultValue={this.state.id}\r\n                autoFocus\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"text\"\r\n                label=\"Sessin Name\"\r\n                name=\"sessionname\"\r\n                autoComplete=\"sessionname\"\r\n                defaultValue={this.state.session_name}\r\n                onChange={this.handleChangeSessionname}\r\n                autoFocus\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                defaultValue={this.state.password}\r\n                onChange={this.handleChangePassword}\r\n                helperText=\"Leave this blank if you do not want to change password\"\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={this.handleSubmit}\r\n                className={classes.submit}\r\n              >\r\n                Update Session\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(EditSession)",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":34,"column":18,"nodeType":"117","messageId":"118","endLine":34,"endColumn":20},{"ruleId":"115","severity":1,"message":"116","line":26,"column":20,"nodeType":"117","messageId":"118","endLine":26,"endColumn":22},{"ruleId":"115","severity":1,"message":"119","line":28,"column":50,"nodeType":"117","messageId":"118","endLine":28,"endColumn":52},{"ruleId":"120","severity":1,"message":"121","line":38,"column":125,"nodeType":"122","messageId":"123","endLine":38,"endColumn":127},{"ruleId":"115","severity":1,"message":"116","line":39,"column":63,"nodeType":"117","messageId":"118","endLine":39,"endColumn":65},{"ruleId":"120","severity":1,"message":"121","line":57,"column":125,"nodeType":"122","messageId":"123","endLine":57,"endColumn":127},{"ruleId":"115","severity":1,"message":"116","line":58,"column":63,"nodeType":"117","messageId":"118","endLine":58,"endColumn":65},{"ruleId":"115","severity":1,"message":"116","line":31,"column":70,"nodeType":"117","messageId":"118","endLine":31,"endColumn":72},{"ruleId":"115","severity":1,"message":"116","line":66,"column":70,"nodeType":"117","messageId":"118","endLine":66,"endColumn":72},{"ruleId":"115","severity":1,"message":"116","line":76,"column":34,"nodeType":"117","messageId":"118","endLine":76,"endColumn":36},{"ruleId":"115","severity":1,"message":"116","line":87,"column":24,"nodeType":"117","messageId":"118","endLine":87,"endColumn":26},{"ruleId":"115","severity":1,"message":"116","line":98,"column":34,"nodeType":"117","messageId":"118","endLine":98,"endColumn":36},{"ruleId":"115","severity":1,"message":"119","line":98,"column":111,"nodeType":"117","messageId":"118","endLine":98,"endColumn":113},{"ruleId":"115","severity":1,"message":"116","line":107,"column":24,"nodeType":"117","messageId":"118","endLine":107,"endColumn":26},{"ruleId":"115","severity":1,"message":"116","line":74,"column":34,"nodeType":"117","messageId":"118","endLine":74,"endColumn":36},{"ruleId":"115","severity":1,"message":"116","line":85,"column":24,"nodeType":"117","messageId":"118","endLine":85,"endColumn":26},{"ruleId":"115","severity":1,"message":"116","line":96,"column":34,"nodeType":"117","messageId":"118","endLine":96,"endColumn":36},{"ruleId":"115","severity":1,"message":"119","line":96,"column":111,"nodeType":"117","messageId":"118","endLine":96,"endColumn":113},{"ruleId":"115","severity":1,"message":"116","line":105,"column":24,"nodeType":"117","messageId":"118","endLine":105,"endColumn":26},{"ruleId":"120","severity":1,"message":"124","line":51,"column":33,"nodeType":"122","messageId":"125","endLine":51,"endColumn":35},{"ruleId":"120","severity":1,"message":"124","line":51,"column":39,"nodeType":"122","messageId":"125","endLine":51,"endColumn":41},{"ruleId":"126","severity":1,"message":"127","line":11,"column":8,"nodeType":"128","messageId":"129","endLine":11,"endColumn":18},{"ruleId":"126","severity":1,"message":"130","line":12,"column":8,"nodeType":"128","messageId":"129","endLine":12,"endColumn":16},{"ruleId":"126","severity":1,"message":"131","line":13,"column":8,"nodeType":"128","messageId":"129","endLine":13,"endColumn":19},{"ruleId":"126","severity":1,"message":"132","line":14,"column":8,"nodeType":"128","messageId":"129","endLine":14,"endColumn":14},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-unused-vars","'InputLabel' is defined but never used.","Identifier","unusedVar","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","no-global-assign","no-unsafe-negation"]